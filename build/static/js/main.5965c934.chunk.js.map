{"version":3,"sources":["components/Sidebar/sidebar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Sidebar","Indicators","Highcharts","DragPanes","AnnotationsAdvanced","PriceIndicator","FullScreen","StockTools","App","useState","generateGraph","state","setState","title","contextButton","align","verticalAlign","yAxis","min","opposite","legend","enabled","layout","credits","xAxis","type","rangeSelector","series","data","x","y","tooltip","backgroundColor","borderWidth","borderRadius","headerFormat","pointFormat","positioner","this","chart","plotLeft","plotTop","shadow","shared","split","options","percentage","secondaryMinSize","style","minHeight","gutter","onClick","span","highcharts","constructorType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAUeA,MARf,WACI,OACI,yC,mKCYRC,IAAWC,KACXC,IAAUD,KACVE,IAAoBF,KACpBG,IAAeH,KACfI,IAAWJ,KACXK,IAAWL,KA2GIM,MAzGf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,eAAe,IAFJ,mBACNC,EADM,KACCC,EADD,OAIiBH,mBAAS,CACrCI,MAAO,GAEPC,cAAe,CACbC,MAAO,QACPC,cAAe,OAEjBC,MAAO,CACLC,IAAK,EACLH,MAAO,OACPF,MAAO,GACPM,UAAU,GAEZC,OAAQ,CACNC,SAAS,EACTN,MAAO,QACPC,cAAe,MACfM,OAAQ,cAEVC,QAAS,CACPF,SAAS,GAEXG,MAAO,CACLC,KAAM,YAERC,cAAe,CACbL,SAAS,GAEXM,OAAQ,CAAC,CACPC,KAAM,CAAC,CACLC,EAAG,aACHC,EAAG,IAEL,CACED,EAAG,aACHC,EAAG,IAEL,CACED,EAAG,aACHC,EAAG,OAIPC,QAAS,CACPC,gBAAiB,QACjBC,YAAa,EACbC,aAAc,EACdC,aAAc,eACdC,YACE,+EACFC,WAAY,WACV,MAAO,CACLR,EAAGS,KAAKC,MAAMC,SACdV,EAAGQ,KAAKC,MAAME,UAGlBC,QAAQ,EACRC,QAAQ,EACRC,OAAO,KA9DE,mBAINC,EAJM,KAkEb,OAlEa,KAmET,kBAAC,IAAD,CAAgBC,YAAY,EAAMC,iBAAkB,IAClD,kBAAC,EAAD,MACA,yBAAKC,MAAO,CAAEhB,gBAAiB,OAAQiB,UAAW,UAChD,kBAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,KAChB,kBAAC,IAAD,KACE,4BAAQC,QAAS,kBAAMvC,EAAS,CAACF,eAAgBC,EAAMD,kBAAvD,oBAEAC,EAAMD,eACN,oCACE,kBAAC,IAAD,CAAK0C,KAAM,IACT,kBAAC,IAAD,CACEC,WAAYnD,IACZoD,gBAAiB,aACjBT,QAASA,KAGb,kBAAC,IAAD,CAAKO,KAAM,IACT,kBAAC,IAAD,CACEC,WAAYnD,IACZoD,gBAAiB,aACjBT,QAASA,KAGb,kBAAC,IAAD,CAAKO,KAAM,IACT,kBAAC,IAAD,CACEC,WAAYnD,IACZoD,gBAAiB,aACjBT,QAASA,UCzGTU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5965c934.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Sidebar(){\r\n    return (\r\n        <div>\r\n            Sidebar\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React, { useState } from 'react';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Sidebar from './components/Sidebar/sidebar.component.jsx';\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Indicators from \"highcharts/indicators/indicators-all.js\";\nimport DragPanes from \"highcharts/modules/drag-panes.js\";\nimport AnnotationsAdvanced from \"highcharts/modules/annotations-advanced.js\";\nimport PriceIndicator from \"highcharts/modules/price-indicator.js\";\nimport FullScreen from \"highcharts/modules/full-screen.js\";\nimport StockTools from \"highcharts/modules/stock-tools.js\";\nimport {Row, Col} from 'antd';\nimport 'highcharts/css/stocktools/gui.css';\nimport 'highcharts/css/annotations/popup.css';\n\nIndicators(Highcharts);\nDragPanes(Highcharts);\nAnnotationsAdvanced(Highcharts);\nPriceIndicator(Highcharts);\nFullScreen(Highcharts);\nStockTools(Highcharts);\n\nfunction App() {\n  const [state, setState] = useState({\n    generateGraph: false\n  })\n  const [options, setOptions] = useState({\n    title: {\n    },\n    contextButton: {\n      align: 'right',\n      verticalAlign: 'top',\n    },\n    yAxis: {\n      min: 0,\n      align: 'left',\n      title: '',\n      opposite: false,\n    },\n    legend: {\n      enabled: true,\n      align: 'right',\n      verticalAlign: 'top',\n      layout: 'horizontal'\n    },\n    credits: {  \n      enabled: false,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    rangeSelector: {\n      enabled: false\n    },\n    series: [{\n      data: [{\n        x: 1599863835000,\n        y: 40\n      },\n      {\n        x: 1599863836000,\n        y: 15\n      },\n      {\n        x: 1599863846000,\n        y: 16\n      }\n    ]\n    }],\n    tooltip: {\n      backgroundColor: \"white\",\n      borderWidth: 0,\n      borderRadius: 0,\n      headerFormat: \"{point.key} \",\n      pointFormat:\n        ' | <span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b>',\n      positioner: function () {\n        return {\n          x: this.chart.plotLeft,\n          y: this.chart.plotTop,\n        };\n      },\n      shadow: false,\n      shared: true,\n      split: false,\n    },\n  });\n\n  return (\n      <SplitterLayout percentage={true} secondaryMinSize={75}>\n        <Sidebar />\n        <div style={{ backgroundColor: \"grey\", minHeight: '100vh'}}>\n          <Row gutter={[12, 12]}>\n            <Col>\n              <button onClick={() => setState({generateGraph: !state.generateGraph})}>Generate graphs</button>\n            </Col>\n            { state.generateGraph &&\n              <>\n                <Col span={24}>\n                  <HighchartsReact \n                    highcharts={Highcharts}  \n                    constructorType={\"stockChart\"}\n                    options={options} \n                  />\n                </Col>\n                <Col span={24}>\n                  <HighchartsReact \n                    highcharts={Highcharts}  \n                    constructorType={\"stockChart\"}\n                    options={options} \n                  />\n                </Col>\n                <Col span={24}>\n                  <HighchartsReact \n                    highcharts={Highcharts}  \n                    constructorType={\"stockChart\"}\n                    options={options} \n                  />\n                </Col>\n              </>\n            }\n          </Row>\n        </div>\n      </SplitterLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}